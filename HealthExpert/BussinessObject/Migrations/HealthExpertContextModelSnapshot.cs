// <auto-generated />
using System;
using BussinessObject.ContextData;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BussinessObject.Migrations
{
    [DbContext(typeof(HealthExpertContext))]
    partial class HealthExpertContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BussinessObject.Model.Authen.Role", b =>
                {
                    b.Property<int>("roleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("roleId"));

                    b.Property<string>("roleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("roleId");

                    b.ToTable("roles");

                    b.HasData(
                        new
                        {
                            roleId = 1,
                            roleName = "Administration"
                        },
                        new
                        {
                            roleId = 2,
                            roleName = "CourseAdmin"
                        },
                        new
                        {
                            roleId = 3,
                            roleName = "CourseManager"
                        },
                        new
                        {
                            roleId = 4,
                            roleName = "Learner"
                        });
                });

            modelBuilder.Entity("BussinessObject.Model.ModelCourse.Course", b =>
                {
                    b.Property<string>("courseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("bmiMax")
                        .HasColumnType("float");

                    b.Property<double>("bmiMin")
                        .HasColumnType("float");

                    b.Property<string>("certificate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("courseAdminaccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("courseAdmincourseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("courseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("createBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dateUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("price")
                        .HasColumnType("float");

                    b.Property<double>("rating")
                        .HasColumnType("float");

                    b.Property<int>("studentNumber")
                        .HasColumnType("int");

                    b.Property<int>("typeId")
                        .HasColumnType("int");

                    b.HasKey("courseId");

                    b.HasIndex("courseAdminaccountId", "courseAdmincourseId");

                    b.ToTable("courses");

                    b.HasData(
                        new
                        {
                            courseId = "C001",
                            bmiMax = 20.0,
                            bmiMin = 10.0,
                            certificate = "Certificate 1",
                            courseName = "Course 1",
                            createBy = "admin",
                            dateUpdate = new DateTime(2024, 3, 24, 0, 42, 6, 33, DateTimeKind.Local).AddTicks(6304),
                            description = "This is course 1",
                            language = "English",
                            price = 10.0,
                            rating = 5.0,
                            studentNumber = 100,
                            typeId = 1
                        });
                });

            modelBuilder.Entity("BussinessObject.Model.ModelCourse.CourseAdmin", b =>
                {
                    b.Property<Guid>("accountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("courseId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("accountId", "courseId");

                    b.ToTable("courseAdmins");
                });

            modelBuilder.Entity("BussinessObject.Model.ModelCourse.CourseManagement", b =>
                {
                    b.Property<int>("courseManagerId")
                        .HasColumnType("int");

                    b.Property<string>("courseId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("courseManagerId", "courseId");

                    b.ToTable("courseManagements");
                });

            modelBuilder.Entity("BussinessObject.Model.ModelCourse.Course_CourseManager_Mapping", b =>
                {
                    b.Property<string>("courseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("courseManagerId")
                        .HasColumnType("int");

                    b.Property<string>("courseManagementcourseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("courseManagementcourseManagerId")
                        .HasColumnType("int");

                    b.HasKey("courseId", "courseManagerId");

                    b.HasIndex("courseManagementcourseManagerId", "courseManagementcourseId");

                    b.ToTable("Course_CourseManager_Mapping");
                });

            modelBuilder.Entity("BussinessObject.Model.ModelCourse.Enrollment", b =>
                {
                    b.Property<Guid>("accountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("courseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("enrollDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("enrollStatus")
                        .HasColumnType("bit");

                    b.HasKey("accountId", "courseId");

                    b.HasIndex("courseId");

                    b.ToTable("enrollments");
                });

            modelBuilder.Entity("BussinessObject.Model.ModelCourse.Feedback", b =>
                {
                    b.Property<Guid>("accountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("courseId")
                        .HasColumnType("int");

                    b.Property<string>("courseId1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("createDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("detail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("feedbackId")
                        .HasColumnType("int");

                    b.HasKey("accountId", "courseId");

                    b.HasIndex("courseId1");

                    b.ToTable("feedbacks");
                });

            modelBuilder.Entity("BussinessObject.Model.ModelPost.Category", b =>
                {
                    b.Property<int>("categoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("categoryId"));

                    b.Property<string>("content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("categoryId");

                    b.ToTable("categories");
                });

            modelBuilder.Entity("BussinessObject.Model.ModelPost.Post", b =>
                {
                    b.Property<int>("postId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("postId"));

                    b.Property<Guid>("accountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("imageFile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<int>("likeCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("publishAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("postId");

                    b.HasIndex("accountId");

                    b.ToTable("posts");
                });

            modelBuilder.Entity("BussinessObject.Model.ModelPost.Post_Category", b =>
                {
                    b.Property<int>("postId")
                        .HasColumnType("int");

                    b.Property<int>("categoryId")
                        .HasColumnType("int");

                    b.HasKey("postId", "categoryId");

                    b.HasIndex("categoryId");

                    b.ToTable("Post_Category");
                });

            modelBuilder.Entity("BussinessObject.Model.ModelPost.Post_Like", b =>
                {
                    b.Property<int>("postLikeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("postLikeId"));

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("postId")
                        .HasColumnType("int");

                    b.Property<string>("userName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("postLikeId");

                    b.HasIndex("postId");

                    b.ToTable("post_Likes");
                });

            modelBuilder.Entity("BussinessObject.Model.ModelPost.Post_Meta", b =>
                {
                    b.Property<int>("postMetaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("postMetaId"));

                    b.Property<string>("content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("hashTag")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("postId")
                        .HasColumnType("int");

                    b.HasKey("postMetaId");

                    b.HasIndex("postId");

                    b.ToTable("post_Metas");
                });

            modelBuilder.Entity("BussinessObject.Model.ModelUser.Accomplishment", b =>
                {
                    b.Property<int>("acplId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("acplId"));

                    b.Property<Guid>("accountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("acplDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("acpltName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("receptDate")
                        .HasColumnType("datetime2");

                    b.HasKey("acplId");

                    b.HasIndex("accountId");

                    b.ToTable("accomplishments");
                });

            modelBuilder.Entity("BussinessObject.Model.ModelUser.Account", b =>
                {
                    b.Property<Guid>("accountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("birthDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("courseAdminaccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("courseAdmincourseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("courseManagerId")
                        .HasColumnType("int");

                    b.Property<string>("courseManagercourseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("createDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("fullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("gender")
                        .HasColumnType("bit");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("passwordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("passwordResetToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("passwordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("resetTokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<int>("roleId")
                        .HasColumnType("int");

                    b.Property<string>("userName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("verificationToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("verifiedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("accountId");

                    b.HasIndex("roleId");

                    b.HasIndex("courseAdminaccountId", "courseAdmincourseId");

                    b.HasIndex("courseManagerId", "courseManagercourseId");

                    b.ToTable("accounts");
                });

            modelBuilder.Entity("BussinessObject.Model.ModelUser.Avatar", b =>
                {
                    b.Property<int>("avatarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("avatarId"));

                    b.Property<Guid>("accountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("avatarName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("avatarPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("uploadDate")
                        .HasColumnType("datetime2");

                    b.HasKey("avatarId");

                    b.HasIndex("accountId");

                    b.ToTable("avatars");
                });

            modelBuilder.Entity("BussinessObject.Model.ModelUser.BMI", b =>
                {
                    b.Property<int>("bmiId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("bmiId"));

                    b.Property<Guid>("accountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("bmiDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("bmiStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("bmiValue")
                        .HasColumnType("float");

                    b.Property<double>("height")
                        .HasColumnType("float");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<double>("weight")
                        .HasColumnType("float");

                    b.HasKey("bmiId");

                    b.HasIndex("accountId");

                    b.ToTable("bmis");
                });

            modelBuilder.Entity("BussinessObject.Model.ModelUser.Photo", b =>
                {
                    b.Property<int>("photoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("photoId"));

                    b.Property<Guid>("accountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("photoName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("photoPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("uploadDate")
                        .HasColumnType("datetime2");

                    b.HasKey("photoId");

                    b.HasIndex("accountId");

                    b.ToTable("photos");
                });

            modelBuilder.Entity("BussinessObject.Model.ModelCourse.Course", b =>
                {
                    b.HasOne("BussinessObject.Model.ModelCourse.CourseAdmin", "courseAdmin")
                        .WithMany("courses")
                        .HasForeignKey("courseAdminaccountId", "courseAdmincourseId");

                    b.Navigation("courseAdmin");
                });

            modelBuilder.Entity("BussinessObject.Model.ModelCourse.Course_CourseManager_Mapping", b =>
                {
                    b.HasOne("BussinessObject.Model.ModelCourse.Course", "course")
                        .WithMany("courseManagerMappings")
                        .HasForeignKey("courseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BussinessObject.Model.ModelCourse.CourseManagement", "courseManagement")
                        .WithMany()
                        .HasForeignKey("courseManagementcourseManagerId", "courseManagementcourseId");

                    b.Navigation("course");

                    b.Navigation("courseManagement");
                });

            modelBuilder.Entity("BussinessObject.Model.ModelCourse.Enrollment", b =>
                {
                    b.HasOne("BussinessObject.Model.ModelUser.Account", "account")
                        .WithMany("enrollments")
                        .HasForeignKey("accountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BussinessObject.Model.ModelCourse.Course", "course")
                        .WithMany("enrollments")
                        .HasForeignKey("courseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("account");

                    b.Navigation("course");
                });

            modelBuilder.Entity("BussinessObject.Model.ModelCourse.Feedback", b =>
                {
                    b.HasOne("BussinessObject.Model.ModelUser.Account", "account")
                        .WithMany("feedbacks")
                        .HasForeignKey("accountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BussinessObject.Model.ModelCourse.Course", "course")
                        .WithMany("feedbacks")
                        .HasForeignKey("courseId1");

                    b.Navigation("account");

                    b.Navigation("course");
                });

            modelBuilder.Entity("BussinessObject.Model.ModelPost.Post", b =>
                {
                    b.HasOne("BussinessObject.Model.ModelUser.Account", "account")
                        .WithMany("posts")
                        .HasForeignKey("accountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("account");
                });

            modelBuilder.Entity("BussinessObject.Model.ModelPost.Post_Category", b =>
                {
                    b.HasOne("BussinessObject.Model.ModelPost.Category", "category")
                        .WithMany("post_Categories")
                        .HasForeignKey("categoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BussinessObject.Model.ModelPost.Post", "post")
                        .WithMany("post_Categories")
                        .HasForeignKey("postId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("category");

                    b.Navigation("post");
                });

            modelBuilder.Entity("BussinessObject.Model.ModelPost.Post_Like", b =>
                {
                    b.HasOne("BussinessObject.Model.ModelPost.Post", "post")
                        .WithMany("post_Likes")
                        .HasForeignKey("postId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("post");
                });

            modelBuilder.Entity("BussinessObject.Model.ModelPost.Post_Meta", b =>
                {
                    b.HasOne("BussinessObject.Model.ModelPost.Post", "post")
                        .WithMany("post_Metas")
                        .HasForeignKey("postId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("post");
                });

            modelBuilder.Entity("BussinessObject.Model.ModelUser.Accomplishment", b =>
                {
                    b.HasOne("BussinessObject.Model.ModelUser.Account", "account")
                        .WithMany()
                        .HasForeignKey("accountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("account");
                });

            modelBuilder.Entity("BussinessObject.Model.ModelUser.Account", b =>
                {
                    b.HasOne("BussinessObject.Model.Authen.Role", "role")
                        .WithMany("account")
                        .HasForeignKey("roleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BussinessObject.Model.ModelCourse.CourseAdmin", "courseAdmin")
                        .WithMany("account")
                        .HasForeignKey("courseAdminaccountId", "courseAdmincourseId");

                    b.HasOne("BussinessObject.Model.ModelCourse.CourseManagement", "courseManager")
                        .WithMany("accounts")
                        .HasForeignKey("courseManagerId", "courseManagercourseId");

                    b.Navigation("courseAdmin");

                    b.Navigation("courseManager");

                    b.Navigation("role");
                });

            modelBuilder.Entity("BussinessObject.Model.ModelUser.Avatar", b =>
                {
                    b.HasOne("BussinessObject.Model.ModelUser.Account", "account")
                        .WithMany()
                        .HasForeignKey("accountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("account");
                });

            modelBuilder.Entity("BussinessObject.Model.ModelUser.BMI", b =>
                {
                    b.HasOne("BussinessObject.Model.ModelUser.Account", "account")
                        .WithMany()
                        .HasForeignKey("accountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("account");
                });

            modelBuilder.Entity("BussinessObject.Model.ModelUser.Photo", b =>
                {
                    b.HasOne("BussinessObject.Model.ModelUser.Account", "account")
                        .WithMany()
                        .HasForeignKey("accountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("account");
                });

            modelBuilder.Entity("BussinessObject.Model.Authen.Role", b =>
                {
                    b.Navigation("account");
                });

            modelBuilder.Entity("BussinessObject.Model.ModelCourse.Course", b =>
                {
                    b.Navigation("courseManagerMappings");

                    b.Navigation("enrollments");

                    b.Navigation("feedbacks");
                });

            modelBuilder.Entity("BussinessObject.Model.ModelCourse.CourseAdmin", b =>
                {
                    b.Navigation("account");

                    b.Navigation("courses");
                });

            modelBuilder.Entity("BussinessObject.Model.ModelCourse.CourseManagement", b =>
                {
                    b.Navigation("accounts");
                });

            modelBuilder.Entity("BussinessObject.Model.ModelPost.Category", b =>
                {
                    b.Navigation("post_Categories");
                });

            modelBuilder.Entity("BussinessObject.Model.ModelPost.Post", b =>
                {
                    b.Navigation("post_Categories");

                    b.Navigation("post_Likes");

                    b.Navigation("post_Metas");
                });

            modelBuilder.Entity("BussinessObject.Model.ModelUser.Account", b =>
                {
                    b.Navigation("enrollments");

                    b.Navigation("feedbacks");

                    b.Navigation("posts");
                });
#pragma warning restore 612, 618
        }
    }
}
